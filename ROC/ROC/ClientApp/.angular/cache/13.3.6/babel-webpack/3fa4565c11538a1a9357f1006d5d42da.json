{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject, from, throwError } from 'rxjs';\nimport { mergeMap, switchMap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport let EndpointBase = /*#__PURE__*/(() => {\n  class EndpointBase {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n    }\n\n    get requestHeaders() {\n      const headers = new HttpHeaders({\n        Authorization: 'Bearer ' + this.authService.accessToken,\n        'Content-Type': 'application/json',\n        Accept: 'application/json, text/plain, */*'\n      });\n      return {\n        headers\n      };\n    }\n\n    refreshLogin() {\n      return this.authService.refreshLogin().pipe(catchError(error => {\n        return this.handleError(error, () => this.refreshLogin());\n      }));\n    }\n\n    handleError(error, continuation) {\n      if (error.status === 401) {\n        if (this.isRefreshingLogin) {\n          return this.pauseTask(continuation);\n        }\n\n        this.isRefreshingLogin = true;\n        return from(this.authService.refreshLogin()).pipe(mergeMap(() => {\n          this.isRefreshingLogin = false;\n          this.resumeTasks(true);\n          return continuation();\n        }), catchError(refreshLoginError => {\n          this.isRefreshingLogin = false;\n          this.resumeTasks(false);\n          this.authService.reLogin();\n\n          if (refreshLoginError.status === 401 || refreshLoginError.error && refreshLoginError.error.error === 'invalid_grant') {\n            return throwError('session expired');\n          } else {\n            return throwError(refreshLoginError || 'server error');\n          }\n        }));\n      }\n\n      if (error.error && error.error.error === 'invalid_grant') {\n        this.authService.reLogin();\n        return throwError(error.error && error.error.error_description ? `session expired (${error.error.error_description})` : 'session expired');\n      } else {\n        return throwError(error);\n      }\n    }\n\n    pauseTask(continuation) {\n      if (!this.taskPauser) {\n        this.taskPauser = new Subject();\n      }\n\n      return this.taskPauser.pipe(switchMap(continueOp => {\n        return continueOp ? continuation() : throwError('session expired');\n      }));\n    }\n\n    resumeTasks(continueOp) {\n      setTimeout(() => {\n        if (this.taskPauser) {\n          this.taskPauser.next(continueOp);\n          this.taskPauser.complete();\n          this.taskPauser = null;\n        }\n      });\n    }\n\n  }\n\n  EndpointBase.ɵfac = function EndpointBase_Factory(t) {\n    return new (t || EndpointBase)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n\n  EndpointBase.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EndpointBase,\n    factory: EndpointBase.ɵfac\n  });\n  return EndpointBase;\n})();","map":null,"metadata":{},"sourceType":"module"}