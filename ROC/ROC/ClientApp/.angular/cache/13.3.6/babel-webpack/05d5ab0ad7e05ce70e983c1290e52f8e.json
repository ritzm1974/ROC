{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let NotificationEndpoint = /*#__PURE__*/(() => {\n  class NotificationEndpoint {\n    constructor() {\n      this.demoNotifications = [{\n        id: 1,\n        header: '20 New Products were added to your inventory by \"administrator\"',\n        body: '20 new \"BMW M6\" were added to your stock by \"administrator\" on 5/28/2017 4:54:13 PM',\n        isRead: true,\n        isPinned: true,\n        date: '2017-05-28T16:29:13.5877958'\n      }, {\n        id: 2,\n        header: '1 Product running low',\n        body: 'You are running low on \"Nissan Patrol\". 2 Items remaining',\n        isRead: false,\n        isPinned: false,\n        date: '2017-05-28T19:54:42.4144502'\n      }, {\n        id: 3,\n        header: 'Tomorrow is half day',\n        body: 'Guys, tomorrow we close by midday. Please check in your sales before noon. Thanx. Alex.',\n        isRead: false,\n        isPinned: false,\n        date: '2017-05-30T11:13:42.4144502'\n      }];\n    }\n\n    getNotificationEndpoint(notificationId) {\n      const notification = this.demoNotifications.find(val => val.id === notificationId);\n      let response;\n\n      if (notification) {\n        response = this.createResponse(notification, 200);\n      } else {\n        response = this.createResponse(null, 404);\n      }\n\n      return of(response.body);\n    }\n\n    getNotificationsEndpoint(page, pageSize) {\n      const notifications = this.demoNotifications;\n      const response = this.createResponse(this.demoNotifications, 200);\n      return of(response.body);\n    }\n\n    getUnreadNotificationsEndpoint(userId) {\n      const unreadNotifications = this.demoNotifications.filter(val => !val.isRead);\n      const response = this.createResponse(unreadNotifications, 200);\n      return of(response.body);\n    }\n\n    getNewNotificationsEndpoint(lastNotificationDate) {\n      const unreadNotifications = this.demoNotifications;\n      const response = this.createResponse(unreadNotifications, 200);\n      return of(response.body);\n    }\n\n    getPinUnpinNotificationEndpoint(notificationId, isPinned) {\n      const notification = this.demoNotifications.find(val => val.id === notificationId);\n      let response;\n\n      if (notification) {\n        response = this.createResponse(null, 204);\n\n        if (isPinned == null) {\n          isPinned = !notification.isPinned;\n        }\n\n        notification.isPinned = isPinned;\n        notification.isRead = true;\n      } else {\n        response = this.createResponse(null, 404);\n      }\n\n      return of(response.body);\n    }\n\n    getReadUnreadNotificationEndpoint(notificationIds, isRead) {\n      for (const notificationId of notificationIds) {\n        const notification = this.demoNotifications.find(val => val.id === notificationId);\n\n        if (notification) {\n          notification.isRead = isRead;\n        }\n      }\n\n      const response = this.createResponse(null, 204);\n      return of(response.body);\n    }\n\n    getDeleteNotificationEndpoint(notificationId) {\n      const notification = this.demoNotifications.find(val => val.id === notificationId);\n      let response;\n\n      if (notification) {\n        this.demoNotifications = this.demoNotifications.filter(val => val.id !== notificationId);\n        response = this.createResponse(notification, 200);\n      } else {\n        response = this.createResponse(null, 404);\n      }\n\n      return of(response.body);\n    }\n\n    createResponse(body, status) {\n      return new HttpResponse({\n        body,\n        status\n      });\n    }\n\n  }\n\n  NotificationEndpoint.ɵfac = function NotificationEndpoint_Factory(t) {\n    return new (t || NotificationEndpoint)();\n  };\n\n  NotificationEndpoint.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationEndpoint,\n    factory: NotificationEndpoint.ɵfac\n  });\n  return NotificationEndpoint;\n})();","map":null,"metadata":{},"sourceType":"module"}