{"ast":null,"code":"// =============================\n// Email: info@ebenmonney.com\n// www.ebenmonney.com/templates\n// =============================\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChildren } from '@angular/core';\nimport { DialogType, MessageSeverity } from '../services/alert.service';\nimport { Permission } from '../models/permission.model';\nimport { LoginComponent } from '../components/login/login.component';\n\nconst alertify = require('../assets/scripts/alertify.js');\n\nlet AppComponent = class AppComponent {\n  constructor(storageManager, toastaService, toastaConfig, accountService, alertService, notificationService, appTitleService, authService, translationService, configurations, router) {\n    this.toastaService = toastaService;\n    this.toastaConfig = toastaConfig;\n    this.accountService = accountService;\n    this.alertService = alertService;\n    this.notificationService = notificationService;\n    this.appTitleService = appTitleService;\n    this.authService = authService;\n    this.translationService = translationService;\n    this.configurations = configurations;\n    this.router = router;\n    this.newNotificationCount = 0;\n    this.appTitle = 'ROC';\n    this.stickyToasties = [];\n    this.dataLoadingConsecutiveFailures = 0;\n\n    this.gT = (key, interpolateParams) => this.translationService.getTranslation(key, interpolateParams);\n\n    storageManager.initialiseStorageSyncListener();\n    this.toastaConfig.theme = 'bootstrap';\n    this.toastaConfig.position = 'top-right';\n    this.toastaConfig.limit = 100;\n    this.toastaConfig.showClose = true;\n    this.toastaConfig.showDuration = false;\n    this.appTitleService.appName = this.appTitle;\n  }\n\n  get notificationsTitle() {\n    if (this.newNotificationCount) {\n      return `${this.gT('app.Notifications')} (${this.newNotificationCount} ${this.gT('app.New')})`;\n    } else {\n      return this.gT('app.Notifications');\n    }\n  }\n\n  ngAfterViewInit() {\n    this.modalLoginControls.changes.subscribe(controls => {\n      controls.forEach(control => {\n        if (control) {\n          if (control instanceof LoginComponent) {\n            this.loginControl = control;\n\n            this.loginControl.modalClosedCallback = () => this.loginModal.hide();\n          } else {\n            this.loginModal = control;\n            this.loginModal.show();\n          }\n        }\n      });\n    });\n  }\n\n  onLoginModalShown() {\n    this.alertService.showStickyMessage('Session Expired', 'Your Session has expired. Please log in again', MessageSeverity.info);\n  }\n\n  onLoginModalHidden() {\n    this.alertService.resetStickyMessage();\n    this.loginControl.reset();\n    this.shouldShowLoginModal = false;\n\n    if (this.authService.isSessionExpired) {\n      this.alertService.showStickyMessage('Session Expired', 'Your Session has expired. Please log in again to renew your session', MessageSeverity.warn);\n    }\n  }\n\n  onLoginModalHide() {\n    this.alertService.resetStickyMessage();\n  }\n\n  ngOnInit() {\n    this.isUserLoggedIn = this.authService.isLoggedIn; // 0.5 extra sec to display preboot/loader information. Preboot screen is removed 0.5 sec later\n\n    setTimeout(() => this.isAppLoaded = true, 500);\n    setTimeout(() => this.removePrebootScreen = true, 1000);\n    setTimeout(() => {\n      if (this.isUserLoggedIn) {\n        this.alertService.resetStickyMessage(); // if (!this.authService.isSessionExpired)\n\n        this.alertService.showMessage('Login', `Welcome back ${this.userName}!`, MessageSeverity.default); // else\n        //    this.alertService.showStickyMessage(\"Session Expired\", \"Your Session has expired. Please log in again\", MessageSeverity.warn);\n      }\n    }, 2000);\n    this.alertService.getDialogEvent().subscribe(alert => this.showDialog(alert));\n    this.alertService.getMessageEvent().subscribe(message => this.showToast(message));\n\n    this.authService.reLoginDelegate = () => this.shouldShowLoginModal = true;\n\n    this.authService.getLoginStatusEvent().subscribe(isLoggedIn => {\n      this.isUserLoggedIn = isLoggedIn;\n\n      if (this.isUserLoggedIn) {\n        this.initNotificationsLoading();\n      } else {\n        this.unsubscribeNotifications();\n      }\n\n      setTimeout(() => {\n        if (!this.isUserLoggedIn) {\n          this.alertService.showMessage('Session Ended!', '', MessageSeverity.default);\n        }\n      }, 500);\n    });\n  }\n\n  ngOnDestroy() {\n    this.unsubscribeNotifications();\n  }\n\n  unsubscribeNotifications() {\n    if (this.notificationsLoadingSubscription) {\n      this.notificationsLoadingSubscription.unsubscribe();\n    }\n  }\n\n  initNotificationsLoading() {\n    this.notificationsLoadingSubscription = this.notificationService.getNewNotificationsPeriodically().subscribe(notifications => {\n      this.dataLoadingConsecutiveFailures = 0;\n      this.newNotificationCount = notifications.filter(n => !n.isRead).length;\n    }, error => {\n      this.alertService.logError(error);\n\n      if (this.dataLoadingConsecutiveFailures++ < 20) {\n        setTimeout(() => this.initNotificationsLoading(), 5000);\n      } else {\n        this.alertService.showStickyMessage('Load Error', 'Loading new notifications from the server failed!', MessageSeverity.error);\n      }\n    });\n  }\n\n  markNotificationsAsRead() {\n    const recentNotifications = this.notificationService.recentNotifications;\n\n    if (recentNotifications.length) {\n      this.notificationService.readUnreadNotification(recentNotifications.map(n => n.id), true).subscribe(response => {\n        for (const n of recentNotifications) {\n          n.isRead = true;\n        }\n\n        this.newNotificationCount = recentNotifications.filter(n => !n.isRead).length;\n      }, error => {\n        this.alertService.logError(error);\n        this.alertService.showMessage('Notification Error', 'Marking read notifications failed', MessageSeverity.error);\n      });\n    }\n  }\n\n  showDialog(dialog) {\n    alertify.set({\n      labels: {\n        ok: dialog.okLabel || 'OK',\n        cancel: dialog.cancelLabel || 'Cancel'\n      }\n    });\n\n    switch (dialog.type) {\n      case DialogType.alert:\n        alertify.alert(dialog.message);\n        break;\n\n      case DialogType.confirm:\n        alertify.confirm(dialog.message, e => {\n          if (e) {\n            dialog.okCallback();\n          } else {\n            if (dialog.cancelCallback) {\n              dialog.cancelCallback();\n            }\n          }\n        });\n        break;\n\n      case DialogType.prompt:\n        alertify.prompt(dialog.message, (e, val) => {\n          if (e) {\n            dialog.okCallback(val);\n          } else {\n            if (dialog.cancelCallback) {\n              dialog.cancelCallback();\n            }\n          }\n        }, dialog.defaultValue);\n        break;\n    }\n  }\n\n  showToast(alert) {\n    if (alert.operation === 'clear') {\n      for (const id of this.stickyToasties.slice(0)) {\n        this.toastaService.clear(id);\n      }\n\n      return;\n    }\n\n    const toastOptions = {\n      title: alert.message.summary,\n      msg: alert.message.detail\n    };\n\n    if (alert.operation === 'add_sticky') {\n      toastOptions.timeout = 0;\n\n      toastOptions.onAdd = toast => {\n        this.stickyToasties.push(toast.id);\n      };\n\n      toastOptions.onRemove = toast => {\n        const index = this.stickyToasties.indexOf(toast.id, 0);\n\n        if (index > -1) {\n          this.stickyToasties.splice(index, 1);\n        }\n\n        if (alert.onRemove) {\n          alert.onRemove();\n        }\n\n        toast.onAdd = null;\n        toast.onRemove = null;\n      };\n    } else {\n      toastOptions.timeout = 4000;\n    }\n\n    switch (alert.message.severity) {\n      case MessageSeverity.default:\n        this.toastaService.default(toastOptions);\n        break;\n\n      case MessageSeverity.info:\n        this.toastaService.info(toastOptions);\n        break;\n\n      case MessageSeverity.success:\n        this.toastaService.success(toastOptions);\n        break;\n\n      case MessageSeverity.error:\n        this.toastaService.error(toastOptions);\n        break;\n\n      case MessageSeverity.warn:\n        this.toastaService.warning(toastOptions);\n        break;\n\n      case MessageSeverity.wait:\n        this.toastaService.wait(toastOptions);\n        break;\n    }\n  }\n\n  logout() {\n    this.authService.logout();\n    this.authService.redirectLogoutUser();\n  }\n\n  getYear() {\n    return new Date().getUTCFullYear();\n  }\n\n  get userName() {\n    return this.authService.currentUser ? this.authService.currentUser.userName : '';\n  }\n\n  get fullName() {\n    return this.authService.currentUser ? this.authService.currentUser.fullName : '';\n  }\n\n  get canViewCustomers() {\n    return this.accountService.userHasPermission(Permission.viewUsersPermission); // eg. viewCustomersPermission\n  }\n\n  get canViewProducts() {\n    return this.accountService.userHasPermission(Permission.viewUsersPermission); // eg. viewProductsPermission\n  }\n\n  get canViewOrders() {\n    return true; // eg. viewOrdersPermission\n  }\n\n};\n\n__decorate([ViewChildren('loginModal,loginControl')], AppComponent.prototype, \"modalLoginControls\", void 0);\n\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module"}