{"ast":null,"code":"import { Subject, forkJoin } from 'rxjs';\nimport { mergeMap, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"./account-endpoint.service\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(authService, accountEndpoint) {\n      this.authService = authService;\n      this.accountEndpoint = accountEndpoint;\n      this.rolesChanged = new Subject();\n    }\n\n    getUser(userId) {\n      return this.accountEndpoint.getUserEndpoint(userId);\n    }\n\n    getUserAndRoles(userId) {\n      return forkJoin([this.accountEndpoint.getUserEndpoint(userId), this.accountEndpoint.getRolesEndpoint()]);\n    }\n\n    getUsers(page, pageSize) {\n      return this.accountEndpoint.getUsersEndpoint(page, pageSize);\n    }\n\n    getUsersAndRoles(page, pageSize) {\n      return forkJoin([this.accountEndpoint.getUsersEndpoint(page, pageSize), this.accountEndpoint.getRolesEndpoint()]);\n    }\n\n    updateUser(user) {\n      if (user.id) {\n        return this.accountEndpoint.getUpdateUserEndpoint(user, user.id);\n      } else {\n        return this.accountEndpoint.getUserByUserNameEndpoint(user.userName).pipe(mergeMap(foundUser => {\n          user.id = foundUser.id;\n          return this.accountEndpoint.getUpdateUserEndpoint(user, user.id);\n        }));\n      }\n    }\n\n    newUser(user) {\n      return this.accountEndpoint.getNewUserEndpoint(user);\n    }\n\n    getUserPreferences() {\n      return this.accountEndpoint.getUserPreferencesEndpoint();\n    }\n\n    updateUserPreferences(configuration) {\n      return this.accountEndpoint.getUpdateUserPreferencesEndpoint(configuration);\n    }\n\n    deleteUser(userOrUserId) {\n      if (typeof userOrUserId === 'string' || userOrUserId instanceof String) {\n        return this.accountEndpoint.getDeleteUserEndpoint(userOrUserId).pipe(tap(data => this.onRolesUserCountChanged(data.roles)));\n      } else {\n        if (userOrUserId.id) {\n          return this.deleteUser(userOrUserId.id);\n        } else {\n          return this.accountEndpoint.getUserByUserNameEndpoint(userOrUserId.userName).pipe(mergeMap(user => this.deleteUser(user.id)));\n        }\n      }\n    }\n\n    unblockUser(userId) {\n      return this.accountEndpoint.getUnblockUserEndpoint(userId);\n    }\n\n    userHasPermission(permissionValue) {\n      return this.permissions.some(p => p === permissionValue);\n    }\n\n    refreshLoggedInUser() {\n      return this.accountEndpoint.refreshLogin();\n    }\n\n    getRoles(page, pageSize) {\n      return this.accountEndpoint.getRolesEndpoint(page, pageSize);\n    }\n\n    getRolesAndPermissions(page, pageSize) {\n      return forkJoin([this.accountEndpoint.getRolesEndpoint(page, pageSize), this.accountEndpoint.getPermissionsEndpoint()]);\n    }\n\n    updateRole(role) {\n      if (role.id) {\n        return this.accountEndpoint.getUpdateRoleEndpoint(role, role.id).pipe(tap(data => this.onRolesChanged([role], AccountService.roleModifiedOperation)));\n      } else {\n        return this.accountEndpoint.getRoleByRoleNameEndpoint(role.name).pipe(mergeMap(foundRole => {\n          role.id = foundRole.id;\n          return this.accountEndpoint.getUpdateRoleEndpoint(role, role.id);\n        }), tap(data => this.onRolesChanged([role], AccountService.roleModifiedOperation)));\n      }\n    }\n\n    newRole(role) {\n      return this.accountEndpoint.getNewRoleEndpoint(role).pipe(tap(data => this.onRolesChanged([role], AccountService.roleAddedOperation)));\n    }\n\n    deleteRole(roleOrRoleId) {\n      if (typeof roleOrRoleId === 'string' || roleOrRoleId instanceof String) {\n        return this.accountEndpoint.getDeleteRoleEndpoint(roleOrRoleId).pipe(tap(data => this.onRolesChanged([data], AccountService.roleDeletedOperation)));\n      } else {\n        if (roleOrRoleId.id) {\n          return this.deleteRole(roleOrRoleId.id);\n        } else {\n          return this.accountEndpoint.getRoleByRoleNameEndpoint(roleOrRoleId.name).pipe(mergeMap(role => this.deleteRole(role.id)));\n        }\n      }\n    }\n\n    getPermissions() {\n      return this.accountEndpoint.getPermissionsEndpoint();\n    }\n\n    onRolesChanged(roles, op) {\n      this.rolesChanged.next({\n        roles,\n        operation: op\n      });\n    }\n\n    onRolesUserCountChanged(roles) {\n      return this.onRolesChanged(roles, AccountService.roleModifiedOperation);\n    }\n\n    getRolesChangedEvent() {\n      return this.rolesChanged.asObservable();\n    }\n\n    get permissions() {\n      return this.authService.userPermissions;\n    }\n\n    get currentUser() {\n      return this.authService.currentUser;\n    }\n\n  }\n\n  AccountService.roleAddedOperation = 'add';\n  AccountService.roleDeletedOperation = 'delete';\n  AccountService.roleModifiedOperation = 'modify';\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.AccountEndpoint));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}