{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { EndpointBase } from './endpoint-base.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./configuration.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./auth.service\";\nexport let AccountEndpoint = /*#__PURE__*/(() => {\n  class AccountEndpoint extends EndpointBase {\n    constructor(configurations, http, authService) {\n      super(http, authService);\n      this.configurations = configurations;\n    }\n\n    get usersUrl() {\n      return this.configurations.baseUrl + '/api/account/users';\n    }\n\n    get userByUserNameUrl() {\n      return this.configurations.baseUrl + '/api/account/users/username';\n    }\n\n    get currentUserUrl() {\n      return this.configurations.baseUrl + '/api/account/users/me';\n    }\n\n    get currentUserPreferencesUrl() {\n      return this.configurations.baseUrl + '/api/account/users/me/preferences';\n    }\n\n    get unblockUserUrl() {\n      return this.configurations.baseUrl + '/api/account/users/unblock';\n    }\n\n    get rolesUrl() {\n      return this.configurations.baseUrl + '/api/account/roles';\n    }\n\n    get roleByRoleNameUrl() {\n      return this.configurations.baseUrl + '/api/account/roles/name';\n    }\n\n    get permissionsUrl() {\n      return this.configurations.baseUrl + '/api/account/permissions';\n    }\n\n    getUserEndpoint(userId) {\n      const endpointUrl = userId ? `${this.usersUrl}/${userId}` : this.currentUserUrl;\n      return this.http.get(endpointUrl, this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getUserEndpoint(userId));\n      }));\n    }\n\n    getUserByUserNameEndpoint(userName) {\n      const endpointUrl = `${this.userByUserNameUrl}/${userName}`;\n      return this.http.get(endpointUrl, this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getUserByUserNameEndpoint(userName));\n      }));\n    }\n\n    getUsersEndpoint(page, pageSize) {\n      const endpointUrl = page && pageSize ? `${this.usersUrl}/${page}/${pageSize}` : this.usersUrl;\n      return this.http.get(endpointUrl, this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getUsersEndpoint(page, pageSize));\n      }));\n    }\n\n    getNewUserEndpoint(userObject) {\n      return this.http.post(this.usersUrl, JSON.stringify(userObject), this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getNewUserEndpoint(userObject));\n      }));\n    }\n\n    getUpdateUserEndpoint(userObject, userId) {\n      const endpointUrl = userId ? `${this.usersUrl}/${userId}` : this.currentUserUrl;\n      return this.http.put(endpointUrl, JSON.stringify(userObject), this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getUpdateUserEndpoint(userObject, userId));\n      }));\n    }\n\n    getPatchUpdateUserEndpoint(valueOrPatch, opOrUserId, path, from, userId) {\n      let endpointUrl;\n      let patchDocument;\n\n      if (path) {\n        endpointUrl = userId ? `${this.usersUrl}/${userId}` : this.currentUserUrl;\n        patchDocument = from ? [{\n          value: valueOrPatch,\n          path,\n          op: opOrUserId,\n          from\n        }] : [{\n          value: valueOrPatch,\n          path,\n          op: opOrUserId\n        }];\n      } else {\n        endpointUrl = opOrUserId ? `${this.usersUrl}/${opOrUserId}` : this.currentUserUrl;\n        patchDocument = valueOrPatch;\n      }\n\n      return this.http.patch(endpointUrl, JSON.stringify(patchDocument), this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getPatchUpdateUserEndpoint(valueOrPatch, opOrUserId, path, from, userId));\n      }));\n    }\n\n    getUserPreferencesEndpoint() {\n      return this.http.get(this.currentUserPreferencesUrl, this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getUserPreferencesEndpoint());\n      }));\n    }\n\n    getUpdateUserPreferencesEndpoint(configuration) {\n      return this.http.put(this.currentUserPreferencesUrl, JSON.stringify(configuration), this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getUpdateUserPreferencesEndpoint(configuration));\n      }));\n    }\n\n    getUnblockUserEndpoint(userId) {\n      const endpointUrl = `${this.unblockUserUrl}/${userId}`;\n      return this.http.put(endpointUrl, null, this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getUnblockUserEndpoint(userId));\n      }));\n    }\n\n    getDeleteUserEndpoint(userId) {\n      const endpointUrl = `${this.usersUrl}/${userId}`;\n      return this.http.delete(endpointUrl, this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getDeleteUserEndpoint(userId));\n      }));\n    }\n\n    getRoleEndpoint(roleId) {\n      const endpointUrl = `${this.rolesUrl}/${roleId}`;\n      return this.http.get(endpointUrl, this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getRoleEndpoint(roleId));\n      }));\n    }\n\n    getRoleByRoleNameEndpoint(roleName) {\n      const endpointUrl = `${this.roleByRoleNameUrl}/${roleName}`;\n      return this.http.get(endpointUrl, this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getRoleByRoleNameEndpoint(roleName));\n      }));\n    }\n\n    getRolesEndpoint(page, pageSize) {\n      const endpointUrl = page && pageSize ? `${this.rolesUrl}/${page}/${pageSize}` : this.rolesUrl;\n      return this.http.get(endpointUrl, this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getRolesEndpoint(page, pageSize));\n      }));\n    }\n\n    getNewRoleEndpoint(roleObject) {\n      return this.http.post(this.rolesUrl, JSON.stringify(roleObject), this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getNewRoleEndpoint(roleObject));\n      }));\n    }\n\n    getUpdateRoleEndpoint(roleObject, roleId) {\n      const endpointUrl = `${this.rolesUrl}/${roleId}`;\n      return this.http.put(endpointUrl, JSON.stringify(roleObject), this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getUpdateRoleEndpoint(roleObject, roleId));\n      }));\n    }\n\n    getDeleteRoleEndpoint(roleId) {\n      const endpointUrl = `${this.rolesUrl}/${roleId}`;\n      return this.http.delete(endpointUrl, this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getDeleteRoleEndpoint(roleId));\n      }));\n    }\n\n    getPermissionsEndpoint() {\n      return this.http.get(this.permissionsUrl, this.requestHeaders).pipe(catchError(error => {\n        return this.handleError(error, () => this.getPermissionsEndpoint());\n      }));\n    }\n\n  }\n\n  AccountEndpoint.ɵfac = function AccountEndpoint_Factory(t) {\n    return new (t || AccountEndpoint)(i0.ɵɵinject(i1.ConfigurationService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.AuthService));\n  };\n\n  AccountEndpoint.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountEndpoint,\n    factory: AccountEndpoint.ɵfac\n  });\n  return AccountEndpoint;\n})();","map":null,"metadata":{},"sourceType":"module"}