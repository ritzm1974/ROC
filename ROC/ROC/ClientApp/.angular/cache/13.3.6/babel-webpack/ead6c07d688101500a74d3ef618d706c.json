{"ast":null,"code":"import { HttpResponseBase } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { Utilities } from '../services/utilities';\nimport * as i0 from \"@angular/core\";\nexport let AlertService = /*#__PURE__*/(() => {\n  class AlertService {\n    constructor() {\n      this.messages = new Subject();\n      this.dialogs = new Subject();\n    }\n\n    showDialog(message, type, okCallback, cancelCallback, okLabel, cancelLabel, defaultValue) {\n      if (!type) {\n        type = DialogType.alert;\n      }\n\n      this.dialogs.next({\n        message,\n        type,\n        okCallback,\n        cancelCallback,\n        okLabel,\n        cancelLabel,\n        defaultValue\n      });\n    }\n\n    showMessage(data, separatorOrDetail, severity) {\n      if (!severity) {\n        severity = MessageSeverity.default;\n      }\n\n      if (data instanceof HttpResponseBase) {\n        data = Utilities.getHttpResponseMessages(data);\n        separatorOrDetail = Utilities.captionAndMessageSeparator;\n      }\n\n      if (data instanceof Array) {\n        for (const message of data) {\n          const msgObject = Utilities.splitInTwo(message, separatorOrDetail);\n          this.showMessageHelper(msgObject.firstPart, msgObject.secondPart, severity, false);\n        }\n      } else {\n        this.showMessageHelper(data, separatorOrDetail, severity, false);\n      }\n    }\n\n    showStickyMessage(data, separatorOrDetail, severity, error, onRemove) {\n      if (!severity) {\n        severity = MessageSeverity.default;\n      }\n\n      if (data instanceof HttpResponseBase) {\n        data = Utilities.getHttpResponseMessages(data);\n        separatorOrDetail = Utilities.captionAndMessageSeparator;\n      }\n\n      if (data instanceof Array) {\n        for (const message of data) {\n          const msgObject = Utilities.splitInTwo(message, separatorOrDetail);\n          this.showMessageHelper(msgObject.firstPart, msgObject.secondPart, severity, true);\n        }\n      } else {\n        if (error) {\n          const msg = `Severity: \"${MessageSeverity[severity]}\", Summary: \"${data}\", Detail: \"${separatorOrDetail}\", Error: \"${Utilities.safeStringify(error)}\"`;\n\n          switch (severity) {\n            case MessageSeverity.default:\n              this.logInfo(msg);\n              break;\n\n            case MessageSeverity.info:\n              this.logInfo(msg);\n              break;\n\n            case MessageSeverity.success:\n              this.logMessage(msg);\n              break;\n\n            case MessageSeverity.error:\n              this.logError(msg);\n              break;\n\n            case MessageSeverity.warn:\n              this.logWarning(msg);\n              break;\n\n            case MessageSeverity.wait:\n              this.logTrace(msg);\n              break;\n          }\n        }\n\n        this.showMessageHelper(data, separatorOrDetail, severity, true, onRemove);\n      }\n    }\n\n    showMessageHelper(summary, detail, severity, isSticky, onRemove) {\n      const alertCommand = {\n        operation: isSticky ? 'add_sticky' : 'add',\n        message: {\n          severity,\n          summary,\n          detail\n        },\n        onRemove\n      };\n      this.messages.next(alertCommand);\n    }\n\n    resetStickyMessage() {\n      this.messages.next({\n        operation: 'clear'\n      });\n    }\n\n    startLoadingMessage(message = 'Loading...', caption = '') {\n      clearTimeout(this.loadingMessageTimeoutId);\n      this.loadingMessageTimeoutId = setTimeout(() => {\n        this.showStickyMessage(caption, message, MessageSeverity.wait);\n      }, 1000);\n    }\n\n    stopLoadingMessage() {\n      clearTimeout(this.loadingMessageTimeoutId);\n      this.resetStickyMessage();\n    }\n\n    logDebug(msg) {\n      console.debug(msg);\n    }\n\n    logError(msg) {\n      console.error(msg);\n    }\n\n    logInfo(msg) {\n      console.info(msg);\n    }\n\n    logMessage(msg) {\n      console.log(msg);\n    }\n\n    logTrace(msg) {\n      console.trace(msg);\n    }\n\n    logWarning(msg) {\n      console.warn(msg);\n    }\n\n    getDialogEvent() {\n      return this.dialogs.asObservable();\n    }\n\n    getMessageEvent() {\n      return this.messages.asObservable();\n    }\n\n  }\n\n  AlertService.ɵfac = function AlertService_Factory(t) {\n    return new (t || AlertService)();\n  };\n\n  AlertService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AlertService,\n    factory: AlertService.ɵfac\n  }); // ******************** Dialog ********************//\n\n  return AlertService;\n})();\nexport class AlertDialog {\n  constructor(message, type, okCallback, cancelCallback, defaultValue, okLabel, cancelLabel) {\n    this.message = message;\n    this.type = type;\n    this.okCallback = okCallback;\n    this.cancelCallback = cancelCallback;\n    this.defaultValue = defaultValue;\n    this.okLabel = okLabel;\n    this.cancelLabel = cancelLabel;\n  }\n\n}\nexport var DialogType = /*#__PURE__*/(() => {\n  (function (DialogType) {\n    DialogType[DialogType[\"alert\"] = 0] = \"alert\";\n    DialogType[DialogType[\"confirm\"] = 1] = \"confirm\";\n    DialogType[DialogType[\"prompt\"] = 2] = \"prompt\";\n  })(DialogType || (DialogType = {}));\n\n  return DialogType;\n})();\n// ******************** End ********************//\n// ******************** Growls ********************//\nexport class AlertCommand {\n  constructor(operation, message, onRemove) {\n    this.operation = operation;\n    this.message = message;\n    this.onRemove = onRemove;\n  }\n\n}\nexport class AlertMessage {\n  constructor(severity, summary, detail) {\n    this.severity = severity;\n    this.summary = summary;\n    this.detail = detail;\n  }\n\n}\nexport var MessageSeverity = /*#__PURE__*/(() => {\n  (function (MessageSeverity) {\n    MessageSeverity[MessageSeverity[\"default\"] = 0] = \"default\";\n    MessageSeverity[MessageSeverity[\"info\"] = 1] = \"info\";\n    MessageSeverity[MessageSeverity[\"success\"] = 2] = \"success\";\n    MessageSeverity[MessageSeverity[\"error\"] = 3] = \"error\";\n    MessageSeverity[MessageSeverity[\"warn\"] = 4] = \"warn\";\n    MessageSeverity[MessageSeverity[\"wait\"] = 5] = \"wait\";\n  })(MessageSeverity || (MessageSeverity = {}));\n\n  return MessageSeverity;\n})();","map":null,"metadata":{},"sourceType":"module"}