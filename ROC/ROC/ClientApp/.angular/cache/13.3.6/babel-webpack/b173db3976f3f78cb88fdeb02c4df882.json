{"ast":null,"code":"import { RouterModule, DefaultUrlSerializer, UrlSerializer } from '@angular/router';\nimport { HomeComponent } from './components/home/home.component';\nimport { CustomersComponent } from './components/customers/customers.component';\nimport { ProductsComponent } from './components/products/products.component';\nimport { OrdersComponent } from './components/orders/orders.component';\nimport { SettingsComponent } from './components/settings/settings.component';\nimport { AboutComponent } from './components/about/about.component';\nimport { NotFoundComponent } from './components/not-found/not-found.component';\nimport { AuthService } from './services/auth.service';\nimport { AuthGuard } from './services/auth-guard.service';\nimport { Utilities } from './services/utilities';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let LowerCaseUrlSerializer = /*#__PURE__*/(() => {\n  class LowerCaseUrlSerializer extends DefaultUrlSerializer {\n    parse(url) {\n      const possibleSeparators = /[?;#]/;\n      const indexOfSeparator = url.search(possibleSeparators);\n      let processedUrl;\n\n      if (indexOfSeparator > -1) {\n        const separator = url.charAt(indexOfSeparator);\n        const urlParts = Utilities.splitInTwo(url, separator);\n        urlParts.firstPart = urlParts.firstPart.toLowerCase();\n        processedUrl = urlParts.firstPart + separator + urlParts.secondPart;\n      } else {\n        processedUrl = url.toLowerCase();\n      }\n\n      return super.parse(processedUrl);\n    }\n\n  }\n\n  LowerCaseUrlSerializer.ɵfac = /*@__PURE__*/function () {\n    let ɵLowerCaseUrlSerializer_BaseFactory;\n    return function LowerCaseUrlSerializer_Factory(t) {\n      return (ɵLowerCaseUrlSerializer_BaseFactory || (ɵLowerCaseUrlSerializer_BaseFactory = i0.ɵɵgetInheritedFactory(LowerCaseUrlSerializer)))(t || LowerCaseUrlSerializer);\n    };\n  }();\n\n  LowerCaseUrlSerializer.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LowerCaseUrlSerializer,\n    factory: LowerCaseUrlSerializer.ɵfac\n  });\n  return LowerCaseUrlSerializer;\n})();\nconst routes = [{\n  path: '',\n  component: HomeComponent,\n  data: {\n    title: 'Home'\n  }\n}, // { path: '', component: HomeComponent, canActivate: [AuthGuard], data: { title: 'Home' } },\n// { path: 'login', component: LoginComponent, data: { title: 'Login' } },\n{\n  path: 'customers',\n  component: CustomersComponent,\n  canActivate: [AuthGuard],\n  data: {\n    title: 'Customers'\n  }\n}, {\n  path: 'products',\n  component: ProductsComponent,\n  canActivate: [AuthGuard],\n  data: {\n    title: 'Products'\n  }\n}, {\n  path: 'orders',\n  component: OrdersComponent,\n  canActivate: [AuthGuard],\n  data: {\n    title: 'Orders'\n  }\n}, {\n  path: 'settings',\n  component: SettingsComponent,\n  canActivate: [AuthGuard],\n  data: {\n    title: 'Settings'\n  }\n}, {\n  path: 'about',\n  component: AboutComponent,\n  data: {\n    title: 'About Us'\n  }\n}, {\n  path: 'home',\n  redirectTo: '/',\n  pathMatch: 'full'\n}, {\n  path: '**',\n  component: NotFoundComponent,\n  data: {\n    title: 'Page Not Found'\n  }\n}];\nexport let AppRoutingModule = /*#__PURE__*/(() => {\n  class AppRoutingModule {}\n\n  AppRoutingModule.ɵfac = function AppRoutingModule_Factory(t) {\n    return new (t || AppRoutingModule)();\n  };\n\n  AppRoutingModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AppRoutingModule\n  });\n  AppRoutingModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [AuthService, AuthGuard, {\n      provide: UrlSerializer,\n      useClass: LowerCaseUrlSerializer\n    }],\n    imports: [[RouterModule.forRoot(routes)], RouterModule]\n  });\n  return AppRoutingModule;\n})();","map":null,"metadata":{},"sourceType":"module"}