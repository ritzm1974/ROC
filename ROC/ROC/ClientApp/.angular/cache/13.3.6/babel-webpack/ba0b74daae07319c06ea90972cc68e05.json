{"ast":null,"code":"import { Subject, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nexport let AppTranslationService = /*#__PURE__*/(() => {\n  class AppTranslationService {\n    constructor(translate) {\n      this.translate = translate;\n      this.onLanguageChanged = new Subject();\n      this.languageChanged$ = this.onLanguageChanged.asObservable();\n      this.addLanguages(['en', 'fr', 'de', 'pt', 'ar', 'ko']);\n      this.setDefaultLanguage('en');\n    }\n\n    addLanguages(lang) {\n      this.translate.addLangs(lang);\n    }\n\n    setDefaultLanguage(lang) {\n      this.translate.setDefaultLang(lang);\n    }\n\n    getDefaultLanguage() {\n      return this.translate.defaultLang;\n    }\n\n    getBrowserLanguage() {\n      return this.translate.getBrowserLang();\n    }\n\n    getCurrentLanguage() {\n      return this.translate.currentLang;\n    }\n\n    getLoadedLanguages() {\n      return this.translate.langs;\n    }\n\n    useBrowserLanguage() {\n      const browserLang = this.getBrowserLanguage();\n\n      if (browserLang.match(/en|fr|de|pt|ar|ko/)) {\n        this.changeLanguage(browserLang);\n        return browserLang;\n      }\n    }\n\n    useDefaultLangage() {\n      return this.changeLanguage(null);\n    }\n\n    changeLanguage(language) {\n      if (!language) {\n        language = this.getDefaultLanguage();\n      }\n\n      if (language !== this.translate.currentLang) {\n        setTimeout(() => {\n          this.translate.use(language);\n          this.onLanguageChanged.next(language);\n        });\n      }\n\n      return language;\n    }\n\n    getTranslation(key, interpolateParams) {\n      return this.translate.instant(key, interpolateParams);\n    }\n\n    getTranslationAsync(key, interpolateParams) {\n      return this.translate.get(key, interpolateParams);\n    }\n\n  }\n\n  AppTranslationService.ɵfac = function AppTranslationService_Factory(t) {\n    return new (t || AppTranslationService)(i0.ɵɵinject(i1.TranslateService));\n  };\n\n  AppTranslationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppTranslationService,\n    factory: AppTranslationService.ɵfac\n  });\n  return AppTranslationService;\n})();\nexport class TranslateLanguageLoader {\n  getTranslation(lang) {\n    // Note Dynamic require(variable) will not work. Require is always at compile time\n    switch (lang) {\n      case 'en':\n        return of(require('../assets/locale/en.json'));\n\n      case 'fr':\n        return of(require('../assets/locale/fr.json'));\n\n      case 'de':\n        return of(require('../assets/locale/de.json'));\n\n      case 'pt':\n        return of(require('../assets/locale/pt.json'));\n\n      case 'ar':\n        return of(require('../assets/locale/ar.json'));\n\n      case 'ko':\n        return of(require('../assets/locale/ko.json'));\n\n      default:\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}