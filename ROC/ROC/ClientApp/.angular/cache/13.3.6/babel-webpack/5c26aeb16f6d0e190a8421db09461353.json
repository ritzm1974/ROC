{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { Utilities } from './utilities';\nimport * as i0 from \"@angular/core\";\n/**\r\n * Provides a wrapper for accessing the web storage API and synchronizing session storage across tabs/windows.\r\n */\n\nexport let LocalStoreManager = /*#__PURE__*/(() => {\n  class LocalStoreManager {\n    constructor() {\n      this.syncKeys = [];\n      this.initEvent = new Subject();\n      this.reservedKeys = ['sync_keys', 'addToSyncKeys', 'removeFromSyncKeys', 'getSessionStorage', 'setSessionStorage', 'addToSessionStorage', 'removeFromSessionStorage', 'clearAllSessionsStorage'];\n\n      this.sessionStorageTransferHandler = event => {\n        if (!event.newValue) {\n          return;\n        }\n\n        if (event.key === 'getSessionStorage') {\n          if (sessionStorage.length) {\n            this.localStorageSetItem('setSessionStorage', sessionStorage);\n            localStorage.removeItem('setSessionStorage');\n          }\n        } else if (event.key === 'setSessionStorage') {\n          if (!this.syncKeys.length) {\n            this.loadSyncKeys();\n          }\n\n          const data = JSON.parse(event.newValue); // console.info(\"Set => Key: Transfer setSessionStorage\" + \",  data: \" + JSON.stringify(data));\n\n          for (const key in data) {\n            if (this.syncKeysContains(key)) {\n              this.sessionStorageSetItem(key, JSON.parse(data[key]));\n            }\n          }\n\n          this.onInit();\n        } else if (event.key === 'addToSessionStorage') {\n          const data = JSON.parse(event.newValue); // console.warn(\"Set => Key: Transfer addToSessionStorage\" + \",  data: \" + JSON.stringify(data));\n\n          this.addToSessionStorageHelper(data.data, data.key);\n        } else if (event.key === 'removeFromSessionStorage') {\n          this.removeFromSessionStorageHelper(event.newValue);\n        } else if (event.key === 'clearAllSessionsStorage' && sessionStorage.length) {\n          this.clearInstanceSessionStorage();\n        } else if (event.key === 'addToSyncKeys') {\n          this.addToSyncKeysHelper(event.newValue);\n        } else if (event.key === 'removeFromSyncKeys') {\n          this.removeFromSyncKeysHelper(event.newValue);\n        }\n      };\n    }\n\n    initialiseStorageSyncListener() {\n      if (LocalStoreManager.syncListenerInitialised === true) {\n        return;\n      }\n\n      LocalStoreManager.syncListenerInitialised = true;\n      window.addEventListener('storage', this.sessionStorageTransferHandler, false);\n      this.syncSessionStorage();\n    }\n\n    deinitialiseStorageSyncListener() {\n      window.removeEventListener('storage', this.sessionStorageTransferHandler, false);\n      LocalStoreManager.syncListenerInitialised = false;\n    }\n\n    clearAllStorage() {\n      this.clearAllSessionsStorage();\n      this.clearLocalStorage();\n    }\n\n    clearAllSessionsStorage() {\n      this.clearInstanceSessionStorage();\n      localStorage.removeItem(LocalStoreManager.DBKEY_SYNC_KEYS);\n      localStorage.setItem('clearAllSessionsStorage', '_dummy');\n      localStorage.removeItem('clearAllSessionsStorage');\n    }\n\n    clearInstanceSessionStorage() {\n      sessionStorage.clear();\n      this.syncKeys = [];\n    }\n\n    clearLocalStorage() {\n      localStorage.clear();\n    }\n\n    saveSessionData(data, key = LocalStoreManager.DBKEY_USER_DATA) {\n      this.testForInvalidKeys(key);\n      this.removeFromSyncKeys(key);\n      localStorage.removeItem(key);\n      this.sessionStorageSetItem(key, data);\n    }\n\n    saveSyncedSessionData(data, key = LocalStoreManager.DBKEY_USER_DATA) {\n      this.testForInvalidKeys(key);\n      localStorage.removeItem(key);\n      this.addToSessionStorage(data, key);\n    }\n\n    savePermanentData(data, key = LocalStoreManager.DBKEY_USER_DATA) {\n      this.testForInvalidKeys(key);\n      this.removeFromSessionStorage(key);\n      this.localStorageSetItem(key, data);\n    }\n\n    moveDataToSessionStorage(key = LocalStoreManager.DBKEY_USER_DATA) {\n      this.testForInvalidKeys(key);\n      const data = this.getData(key);\n\n      if (data == null) {\n        return;\n      }\n\n      this.saveSessionData(data, key);\n    }\n\n    moveDataToSyncedSessionStorage(key = LocalStoreManager.DBKEY_USER_DATA) {\n      this.testForInvalidKeys(key);\n      const data = this.getData(key);\n\n      if (data == null) {\n        return;\n      }\n\n      this.saveSyncedSessionData(data, key);\n    }\n\n    moveDataToPermanentStorage(key = LocalStoreManager.DBKEY_USER_DATA) {\n      this.testForInvalidKeys(key);\n      const data = this.getData(key);\n\n      if (data == null) {\n        return;\n      }\n\n      this.savePermanentData(data, key);\n    }\n\n    exists(key = LocalStoreManager.DBKEY_USER_DATA) {\n      let data = sessionStorage.getItem(key);\n\n      if (data == null) {\n        data = localStorage.getItem(key);\n      }\n\n      return data != null;\n    }\n\n    getData(key = LocalStoreManager.DBKEY_USER_DATA) {\n      this.testForInvalidKeys(key);\n      let data = this.sessionStorageGetItem(key);\n\n      if (data == null) {\n        data = this.localStorageGetItem(key);\n      }\n\n      return data;\n    }\n\n    getDataObject(key = LocalStoreManager.DBKEY_USER_DATA, isDateType = false) {\n      let data = this.getData(key);\n\n      if (data != null) {\n        if (isDateType) {\n          data = new Date(data);\n        }\n\n        return data;\n      } else {\n        return null;\n      }\n    }\n\n    deleteData(key = LocalStoreManager.DBKEY_USER_DATA) {\n      this.testForInvalidKeys(key);\n      this.removeFromSessionStorage(key);\n      localStorage.removeItem(key);\n    }\n\n    getInitEvent() {\n      return this.initEvent.asObservable();\n    }\n\n    syncSessionStorage() {\n      localStorage.setItem('getSessionStorage', '_dummy');\n      localStorage.removeItem('getSessionStorage');\n    }\n\n    addToSessionStorage(data, key) {\n      this.addToSessionStorageHelper(data, key);\n      this.addToSyncKeysBackup(key);\n      this.localStorageSetItem('addToSessionStorage', {\n        key,\n        data\n      });\n      localStorage.removeItem('addToSessionStorage');\n    }\n\n    addToSessionStorageHelper(data, key) {\n      this.addToSyncKeysHelper(key);\n      this.sessionStorageSetItem(key, data);\n    }\n\n    removeFromSessionStorage(keyToRemove) {\n      this.removeFromSessionStorageHelper(keyToRemove);\n      this.removeFromSyncKeysBackup(keyToRemove);\n      localStorage.setItem('removeFromSessionStorage', keyToRemove);\n      localStorage.removeItem('removeFromSessionStorage');\n    }\n\n    removeFromSessionStorageHelper(keyToRemove) {\n      sessionStorage.removeItem(keyToRemove);\n      this.removeFromSyncKeysHelper(keyToRemove);\n    }\n\n    testForInvalidKeys(key) {\n      if (!key) {\n        throw new Error('key cannot be empty');\n      }\n\n      if (this.reservedKeys.some(x => x === key)) {\n        throw new Error(`The storage key \"${key}\" is reserved and cannot be used. Please use a different key`);\n      }\n    }\n\n    syncKeysContains(key) {\n      return this.syncKeys.some(x => x === key);\n    }\n\n    loadSyncKeys() {\n      if (this.syncKeys.length) {\n        return;\n      }\n\n      this.syncKeys = this.getSyncKeysFromStorage();\n    }\n\n    getSyncKeysFromStorage(defaultValue = []) {\n      const data = this.localStorageGetItem(LocalStoreManager.DBKEY_SYNC_KEYS);\n\n      if (data == null) {\n        return defaultValue;\n      } else {\n        return data;\n      }\n    }\n\n    addToSyncKeys(key) {\n      this.addToSyncKeysHelper(key);\n      this.addToSyncKeysBackup(key);\n      localStorage.setItem('addToSyncKeys', key);\n      localStorage.removeItem('addToSyncKeys');\n    }\n\n    addToSyncKeysBackup(key) {\n      const storedSyncKeys = this.getSyncKeysFromStorage();\n\n      if (!storedSyncKeys.some(x => x === key)) {\n        storedSyncKeys.push(key);\n        this.localStorageSetItem(LocalStoreManager.DBKEY_SYNC_KEYS, storedSyncKeys);\n      }\n    }\n\n    removeFromSyncKeysBackup(key) {\n      const storedSyncKeys = this.getSyncKeysFromStorage();\n      const index = storedSyncKeys.indexOf(key);\n\n      if (index > -1) {\n        storedSyncKeys.splice(index, 1);\n        this.localStorageSetItem(LocalStoreManager.DBKEY_SYNC_KEYS, storedSyncKeys);\n      }\n    }\n\n    addToSyncKeysHelper(key) {\n      if (!this.syncKeysContains(key)) {\n        this.syncKeys.push(key);\n      }\n    }\n\n    removeFromSyncKeys(key) {\n      this.removeFromSyncKeysHelper(key);\n      this.removeFromSyncKeysBackup(key);\n      localStorage.setItem('removeFromSyncKeys', key);\n      localStorage.removeItem('removeFromSyncKeys');\n    }\n\n    removeFromSyncKeysHelper(key) {\n      const index = this.syncKeys.indexOf(key);\n\n      if (index > -1) {\n        this.syncKeys.splice(index, 1);\n      }\n    }\n\n    localStorageSetItem(key, data) {\n      localStorage.setItem(key, JSON.stringify(data));\n    }\n\n    sessionStorageSetItem(key, data) {\n      sessionStorage.setItem(key, JSON.stringify(data));\n    }\n\n    localStorageGetItem(key) {\n      return Utilities.JsonTryParse(localStorage.getItem(key));\n    }\n\n    sessionStorageGetItem(key) {\n      return Utilities.JsonTryParse(sessionStorage.getItem(key));\n    }\n\n    onInit() {\n      setTimeout(() => {\n        this.initEvent.next();\n        this.initEvent.complete();\n      });\n    }\n\n  }\n\n  LocalStoreManager.syncListenerInitialised = false;\n  LocalStoreManager.DBKEY_USER_DATA = 'user_data';\n  LocalStoreManager.DBKEY_SYNC_KEYS = 'sync_keys';\n\n  LocalStoreManager.ɵfac = function LocalStoreManager_Factory(t) {\n    return new (t || LocalStoreManager)();\n  };\n\n  LocalStoreManager.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocalStoreManager,\n    factory: LocalStoreManager.ɵfac\n  });\n  return LocalStoreManager;\n})();","map":null,"metadata":{},"sourceType":"module"}