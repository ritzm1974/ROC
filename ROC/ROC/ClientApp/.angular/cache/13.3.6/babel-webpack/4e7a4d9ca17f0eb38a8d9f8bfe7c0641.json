{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { from } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { DBkeys } from './db-keys';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"angular-oauth2-oidc\";\nimport * as i3 from \"./configuration.service\";\nimport * as i4 from \"./local-store-manager.service\";\nexport let OidcHelperService = /*#__PURE__*/(() => {\n  class OidcHelperService {\n    constructor(http, oauthService, configurations, localStorage) {\n      this.http = http;\n      this.oauthService = oauthService;\n      this.configurations = configurations;\n      this.localStorage = localStorage;\n      this.clientId = 'quickapp_spa';\n      this.scope = 'openid email phone profile offline_access roles quickapp_api';\n    }\n\n    get baseUrl() {\n      return this.configurations.baseUrl;\n    }\n\n    loginWithPassword(userName, password) {\n      const header = new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n      const params = new HttpParams().append('username', userName).append('password', password).append('client_id', this.clientId).append('grant_type', 'password').append('scope', this.scope);\n      this.oauthService.issuer = this.baseUrl;\n      return from(this.oauthService.loadDiscoveryDocument()).pipe(mergeMap(() => {\n        return this.http.post(this.oauthService.tokenEndpoint, params, {\n          headers: header\n        });\n      }));\n    }\n\n    refreshLogin() {\n      const header = new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n      const params = new HttpParams().append('refresh_token', this.refreshToken).append('client_id', this.clientId).append('grant_type', 'refresh_token');\n      this.oauthService.issuer = this.baseUrl;\n      return from(this.oauthService.loadDiscoveryDocument()).pipe(mergeMap(() => {\n        return this.http.post(this.oauthService.tokenEndpoint, params, {\n          headers: header\n        });\n      }));\n    }\n\n    get accessToken() {\n      return this.localStorage.getData(DBkeys.ACCESS_TOKEN);\n    }\n\n    get accessTokenExpiryDate() {\n      return this.localStorage.getDataObject(DBkeys.TOKEN_EXPIRES_IN, true);\n    }\n\n    get refreshToken() {\n      return this.localStorage.getData(DBkeys.REFRESH_TOKEN);\n    }\n\n    get isSessionExpired() {\n      if (this.accessTokenExpiryDate == null) {\n        return true;\n      }\n\n      return this.accessTokenExpiryDate.valueOf() <= new Date().valueOf();\n    }\n\n  }\n\n  OidcHelperService.ɵfac = function OidcHelperService_Factory(t) {\n    return new (t || OidcHelperService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.OAuthService), i0.ɵɵinject(i3.ConfigurationService), i0.ɵɵinject(i4.LocalStoreManager));\n  };\n\n  OidcHelperService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OidcHelperService,\n    factory: OidcHelperService.ɵfac\n  });\n  return OidcHelperService;\n})();","map":null,"metadata":{},"sourceType":"module"}