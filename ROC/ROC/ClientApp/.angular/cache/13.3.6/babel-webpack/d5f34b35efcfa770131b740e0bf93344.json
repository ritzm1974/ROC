{"ast":null,"code":"import { DialogType, MessageSeverity } from '../../services/alert.service';\nimport { fromEvent, of, merge } from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/alert.service\";\n\nfunction StatisticsDemoComponent_th_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const label_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(label_r2);\n  }\n}\n\nfunction StatisticsDemoComponent_tr_12_td_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const j_r6 = ctx.index;\n    const d_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(d_r3 && d_r3.data[j_r6]);\n  }\n}\n\nfunction StatisticsDemoComponent_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, StatisticsDemoComponent_tr_12_td_3_Template, 2, 1, \"td\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const d_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(d_r3 && d_r3.label.split(\" \").pop());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.chartLabels);\n  }\n}\n\nrequire('chart.js');\n\nexport let StatisticsDemoComponent = /*#__PURE__*/(() => {\n  class StatisticsDemoComponent {\n    constructor(alertService) {\n      this.alertService = alertService;\n      this.chartData = [{\n        data: [65, 59, 80, 81, 56, 55],\n        label: 'Series A'\n      }, {\n        data: [28, 48, 40, 19, 86, 27],\n        label: 'Series B'\n      }, {\n        data: [18, 48, 77, 9, 100, 27],\n        label: 'Series C'\n      }];\n      this.chartLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n      this.chartOptions = {\n        responsive: true,\n        title: {\n          display: false,\n          fontSize: 16,\n          text: 'Important Stuff'\n        }\n      };\n      this.chartColors = [{\n        backgroundColor: 'rgba(148,159,177,0.2)',\n        borderColor: 'rgba(148,159,177,1)',\n        pointBackgroundColor: 'rgba(148,159,177,1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(148,159,177,0.8)'\n      }, {\n        backgroundColor: 'rgba(77,83,96,0.2)',\n        borderColor: 'rgba(77,83,96,1)',\n        pointBackgroundColor: 'rgba(77,83,96,1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(77,83,96,1)'\n      }, {\n        backgroundColor: 'rgba(128,128,128,0.2)',\n        borderColor: 'rgba(128,128,128,1)',\n        pointBackgroundColor: 'rgba(128,128,128,1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(128,128,128,0.8)'\n      }];\n      this.chartLegend = true;\n      this.chartType = 'line';\n    }\n\n    ngOnInit() {\n      this.timerReference = setInterval(() => this.randomize(), 5000);\n      const initialWidth$ = of(window.innerWidth);\n      const resizedWidth$ = fromEvent(window, 'resize').pipe(map(event => event.target.innerWidth));\n      this.windowWidth$ = merge(initialWidth$, resizedWidth$).pipe(distinctUntilChanged());\n      this.windowWidthSub = this.windowWidth$.subscribe(width => this.chartLegend = width < 600 ? false : true);\n    }\n\n    ngOnDestroy() {\n      clearInterval(this.timerReference);\n      this.windowWidthSub.unsubscribe();\n    }\n\n    randomize() {\n      const chartData = new Array(this.chartData.length);\n\n      for (let i = 0; i < this.chartData.length; i++) {\n        chartData[i] = {\n          data: new Array(this.chartData[i].data.length),\n          label: this.chartData[i].label\n        };\n\n        for (let j = 0; j < this.chartData[i].data.length; j++) {\n          chartData[i].data[j] = Math.floor(Math.random() * 100 + 1);\n        }\n      }\n\n      this.chartData = chartData;\n    }\n\n    changeChartType(type) {\n      this.chartType = type;\n    }\n\n    showMessage(msg) {\n      this.alertService.showMessage('Demo', msg, MessageSeverity.info);\n    }\n\n    showDialog(msg) {\n      this.alertService.showDialog(msg, DialogType.prompt, val => this.configure(true, val), () => this.configure(false));\n    }\n\n    configure(response, value) {\n      if (response) {\n        this.alertService.showStickyMessage('Simulating...', '', MessageSeverity.wait);\n        setTimeout(() => {\n          this.alertService.resetStickyMessage();\n          this.alertService.showMessage('Demo', `Your settings was successfully configured to \\\"${value}\\\"`, MessageSeverity.success);\n        }, 2000);\n      } else {\n        this.alertService.showMessage('Demo', 'Operation cancelled by user', MessageSeverity.default);\n      }\n    }\n\n    chartClicked(e) {\n      console.log(e);\n    }\n\n    chartHovered(e) {\n      console.log(e);\n    }\n\n  }\n\n  StatisticsDemoComponent.ɵfac = function StatisticsDemoComponent_Factory(t) {\n    return new (t || StatisticsDemoComponent)(i0.ɵɵdirectiveInject(i1.AlertService));\n  };\n\n  StatisticsDemoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StatisticsDemoComponent,\n    selectors: [[\"app-statistics-demo\"]],\n    decls: 42,\n    vars: 20,\n    consts: [[1, \"row\", \"statistics-container\"], [1, \"col-md-6\"], [1, \"chart-container\"], [\"baseChart\", \"\", \"width\", \"600\", \"height\", \"250\", 3, \"datasets\", \"labels\", \"options\", \"colors\", \"legend\", \"chartType\", \"chartHover\", \"chartClick\"], [1, \"d-none\", \"d-sm-block\", \"table-responsive\"], [1, \"table\", \"table-sm\"], [1, \"border-top-0\"], [\"class\", \"border-top-0\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"refresh-btn\", 3, \"click\"], [\"dropdown\", \"\", 1, \"chart-type-container\"], [\"id\", \"chartType\", \"type\", \"button\", \"data-toggle\", \"dropdown\", 1, \"dropdown-toggle\"], [1, \"fa\", \"fa-bar-chart\"], [1, \"dropdown-menu\"], [\"href\", \"javascript:;\", 1, \"dropdown-item\", 3, \"click\"], [1, \"dropdown-divider\"], [3, \"click\"], [1, \"fa\", \"fa-bars\"], [1, \"fa\", \"fa-cogs\"]],\n    template: function StatisticsDemoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"canvas\", 3);\n        i0.ɵɵlistener(\"chartHover\", function StatisticsDemoComponent_Template_canvas_chartHover_3_listener($event) {\n          return ctx.chartHovered($event);\n        })(\"chartClick\", function StatisticsDemoComponent_Template_canvas_chartClick_3_listener($event) {\n          return ctx.chartClicked($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(4, \"div\", 1)(5, \"div\", 4)(6, \"table\", 5)(7, \"thead\")(8, \"tr\");\n        i0.ɵɵelement(9, \"th\", 6);\n        i0.ɵɵtemplate(10, StatisticsDemoComponent_th_10_Template, 2, 1, \"th\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"tbody\");\n        i0.ɵɵtemplate(12, StatisticsDemoComponent_tr_12_Template, 4, 2, \"tr\", 8);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(13, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function StatisticsDemoComponent_Template_button_click_13_listener() {\n          ctx.randomize();\n          return ctx.showMessage(\"Manual refresh!\");\n        });\n        i0.ɵɵtext(14, \"REFSH\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 10)(16, \"button\", 11);\n        i0.ɵɵelement(17, \"i\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"ul\", 13)(19, \"li\")(20, \"a\", 14);\n        i0.ɵɵlistener(\"click\", function StatisticsDemoComponent_Template_a_click_20_listener() {\n          return ctx.changeChartType(\"bar\");\n        });\n        i0.ɵɵtext(21, \"Bar Chart\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(22, \"li\")(23, \"a\", 14);\n        i0.ɵɵlistener(\"click\", function StatisticsDemoComponent_Template_a_click_23_listener() {\n          return ctx.changeChartType(\"pie\");\n        });\n        i0.ɵɵtext(24, \"Pie Chart\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(25, \"li\")(26, \"a\", 14);\n        i0.ɵɵlistener(\"click\", function StatisticsDemoComponent_Template_a_click_26_listener() {\n          return ctx.changeChartType(\"doughnut\");\n        });\n        i0.ɵɵtext(27, \"Doughnut Chart\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"li\")(29, \"a\", 14);\n        i0.ɵɵlistener(\"click\", function StatisticsDemoComponent_Template_a_click_29_listener() {\n          return ctx.changeChartType(\"polarArea\");\n        });\n        i0.ɵɵtext(30, \"Polar Area Chart\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(31, \"li\")(32, \"a\", 14);\n        i0.ɵɵlistener(\"click\", function StatisticsDemoComponent_Template_a_click_32_listener() {\n          return ctx.changeChartType(\"radar\");\n        });\n        i0.ɵɵtext(33, \"Radar Chart\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(34, \"li\", 15);\n        i0.ɵɵelementStart(35, \"li\")(36, \"a\", 14);\n        i0.ɵɵlistener(\"click\", function StatisticsDemoComponent_Template_a_click_36_listener() {\n          return ctx.changeChartType(\"line\");\n        });\n        i0.ɵɵtext(37, \"Line Chart\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(38, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function StatisticsDemoComponent_Template_button_click_38_listener() {\n          return ctx.showMessage(\"You've clicked on the menu\");\n        });\n        i0.ɵɵelement(39, \"i\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function StatisticsDemoComponent_Template_button_click_40_listener() {\n          return ctx.showDialog(\"Enter some value to do serious configuration...\");\n        });\n        i0.ɵɵelement(41, \"i\", 18);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"datasets\", ctx.chartData)(\"labels\", ctx.chartLabels)(\"options\", ctx.chartOptions)(\"colors\", ctx.chartColors)(\"legend\", ctx.chartLegend)(\"chartType\", ctx.chartType);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngForOf\", ctx.chartLabels);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.chartData);\n        i0.ɵɵadvance(7);\n        i0.ɵɵclassProp(\"active\", ctx.chartType == \"bar\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵclassProp(\"active\", ctx.chartType == \"pie\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵclassProp(\"active\", ctx.chartType == \"doughnut\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵclassProp(\"active\", ctx.chartType == \"polarArea\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵclassProp(\"active\", ctx.chartType == \"radar\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵclassProp(\"active\", ctx.chartType == \"line\");\n      }\n    },\n    styles: [\".statistics-container[_ngcontent-%COMP%]{font-size:.875rem}.chart-container[_ngcontent-%COMP%]{display:block}.refresh-btn[_ngcontent-%COMP%]{margin-right:10px}.chart-type-container[_ngcontent-%COMP%]{display:inline-block}.chart-type-container[_ngcontent-%COMP%]   .active[_ngcontent-%COMP%]{background-color:#e8e8e8}\"]\n  });\n  return StatisticsDemoComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}