{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let JwtHelper = /*#__PURE__*/(() => {\n  class JwtHelper {\n    urlBase64Decode(str) {\n      let output = str.replace(/-/g, '+').replace(/_/g, '/');\n\n      switch (output.length % 4) {\n        case 0:\n          {\n            break;\n          }\n\n        case 2:\n          {\n            output += '==';\n            break;\n          }\n\n        case 3:\n          {\n            output += '=';\n            break;\n          }\n\n        default:\n          {\n            throw new Error('Illegal base64url string!');\n          }\n      }\n\n      return this.b64DecodeUnicode(output);\n    } // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n\n\n    b64DecodeUnicode(str) {\n      return decodeURIComponent(Array.prototype.map.call(atob(str), c => {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n    }\n\n    decodeToken(token) {\n      const parts = token.split('.');\n\n      if (parts.length !== 3) {\n        throw new Error('JWT must have 3 parts');\n      }\n\n      const decoded = this.urlBase64Decode(parts[1]);\n\n      if (!decoded) {\n        throw new Error('Cannot decode the token');\n      }\n\n      return JSON.parse(decoded);\n    }\n\n    getTokenExpirationDate(token) {\n      let decoded;\n      decoded = this.decodeToken(token);\n\n      if (!decoded.hasOwnProperty('exp')) {\n        return null;\n      }\n\n      const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n\n      date.setUTCSeconds(decoded.exp);\n      return date;\n    }\n\n    isTokenExpired(token, offsetSeconds) {\n      const date = this.getTokenExpirationDate(token);\n      offsetSeconds = offsetSeconds || 0;\n\n      if (date == null) {\n        return false;\n      } // Token expired?\n\n\n      return !(date.valueOf() > new Date().valueOf() + offsetSeconds * 1000);\n    }\n\n  }\n\n  JwtHelper.ɵfac = function JwtHelper_Factory(t) {\n    return new (t || JwtHelper)();\n  };\n\n  JwtHelper.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtHelper,\n    factory: JwtHelper.ɵfac\n  });\n  return JwtHelper;\n})();","map":null,"metadata":{},"sourceType":"module"}